/**
* 열심히해보자
* 뭐지
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.authenticate
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.delete
import io.ktor.locations.get
import io.ktor.locations.post
import io.ktor.locations.put
import io.ktor.locations.patch
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.route

import io.swagger.server.Paths
import io.swagger.server.infrastructure.ApiPrincipal


import io.swagger.server.models.AnnouncementCreateRequest
import io.swagger.server.models.AnnouncementResponse

@KtorExperimentalLocationsAPI
fun Route.DefaultApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()
    get<Paths.announcementsAnnouncementIdGet> {  _: Paths.announcementsAnnouncementIdGet ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1,
  "writer" : {
    "name" : "제이슨",
    "id" : 1
  },
  "title" : "내일부터 재택근무합니다.",
  "content" : "종료기간은 추후 공지하겠습니다."
}"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }    }
    get<Paths.announcementsGet> {  _: Paths.announcementsGet ->
        val exampleContentType = "application/json"
        val exampleContentString = """[ "", "" ]"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }    }
    post<Paths.announcementsPost> {  _: Paths.announcementsPost ->
        call.respond(HttpStatusCode.NotImplemented)
    }
}
